{"version":3,"sources":["Input/Input.jsx","Auth/Auth.jsx","App.js","index.js"],"names":["Input","name","type","label","value","valid","touched","shouldValidate","errorMassage","onChange","inputType","htmlFor","cls","isInvalid","push","className","join","id","Auth","useState","firstName","validation","required","minLength","secondName","phoneNumber","email","password","stateInput","setIsInput","checkValidForm","Object","values","every","validateControl","isValid","trim","test","String","toLowerCase","length","onChangeHandler","event","newValue","target","changedInput","getAttribute","customState","newFormState","onSubmit","preventDefault","keys","map","controlName","index","control","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f483d54.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.css'\r\n\r\nexport const Input = ({\r\n  name, \r\n  type, \r\n  label, \r\n  value,\r\n  valid,\r\n  touched,\r\n  shouldValidate,\r\n  errorMassage, \r\n  onChange\r\n}) => {\r\n  const inputType = type || 'text'\r\n  const htmlFor = `${inputType}-${label}`\r\n  const cls = ['input']\r\n\r\n  const isInvalid = () => {\r\n    return !valid && shouldValidate && touched\r\n  } \r\n\r\n  if (isInvalid()) {\r\n    cls.push('invalid')\r\n  }\r\n\r\n  return (\r\n    <div className={cls.join(' ')}>\r\n      <label htmlFor={htmlFor}>{label}</label>\r\n      <input \r\n        name={name}\r\n        type={inputType} \r\n        id={htmlFor} \r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n        {isInvalid()\r\n          ? <span>{errorMassage}</span>\r\n          : null\r\n        }\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { Input } from '../Input/Input'\r\nimport './Auth.css'\r\n\r\nexport const Auth = () => {\r\n  const formControls = {\r\n    firstName:{\r\n      value: '',\r\n      type: '',\r\n      label: 'First Name',\r\n      errorMassage: 'Введите корректное имя',\r\n      valid: false,\r\n      touched: false,\r\n      validation: {\r\n          required: true,\r\n          minLength: 3\r\n      }\r\n    },\r\n    secondName:{\r\n      value: '',\r\n      type: '',\r\n      label: 'Second Name',\r\n      errorMassage: 'Введите корректную фамилию',\r\n      valid: false,\r\n      touched: false,\r\n      validation: {\r\n          required: true,\r\n          minLength: 3\r\n      }\r\n    },\r\n    phoneNumber:{\r\n      value: '',\r\n      type: 'tel',\r\n      label: 'Phone number',\r\n      errorMassage:'Введите номер телефона (не менее 10 символов)',\r\n      valid: false,\r\n      touched: false,\r\n      validation: {\r\n          required: true,\r\n          minLength: 10\r\n      }\r\n    },\r\n    email:{\r\n      value: '',\r\n      type: 'email',\r\n      label: 'Email',\r\n      errorMassage:'Введите корректный email',\r\n      valid: false,\r\n      touched: false,\r\n      validation: {\r\n          required: true,\r\n          email: true\r\n      }\r\n    },\r\n    password:{\r\n        value: '',\r\n        type: 'password',\r\n        label: 'Password',\r\n        errorMassage:'Введите корректный пароль (не менее 8 символов)',\r\n        valid: false,\r\n        touched: false,\r\n        validation: {\r\n            required: true,\r\n            minLength: 8\r\n        }\r\n    }\r\n  }\r\n\r\n  const [stateInput, setIsInput] = useState(formControls)\r\n\r\n  const validateEmail= (email) => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n  }\r\n  \r\n  const checkValidForm = Object.values(stateInput).every(({ valid }) => valid === true);\r\n\r\n  const validateControl = (value, validation) => {\r\n    if (!validation) {\r\n      return true\r\n    }\r\n\r\n    let isValid = true\r\n\r\n    if(validation.required) {\r\n      isValid = value.trim() !== '' && isValid\r\n    }\r\n\r\n    if(validation.email) {\r\n      isValid = validateEmail(value) && isValid\r\n    }\r\n\r\n    if (validation.minLength) {\r\n      isValid = value.trim().length >= validation.minLength && isValid\r\n    }\r\n\r\n    return isValid\r\n  }\r\n\r\n  const onChangeHandler = event => {\r\n    const newValue = event.target.value\r\n    const changedInput = event.target.getAttribute('name')\r\n    const customState = {\r\n      ...stateInput,\r\n      [changedInput]: {\r\n        ...stateInput[changedInput]\r\n      }\r\n    }\r\n    const validation = {...customState[changedInput]}\r\n\r\n    const newFormState = {\r\n      ...stateInput,\r\n      [changedInput]: {\r\n        ...stateInput[changedInput],\r\n        value: newValue,\r\n        touched: true,\r\n        valid: validateControl(newValue, {...validation}.validation)\r\n      }\r\n    }\r\n\r\n    setIsInput(newFormState)\r\n  }\r\n\r\n  const renderInputs = () => {\r\n    return ( Object\r\n    .keys(stateInput)\r\n    .map((controlName, index) => {\r\n    const control = stateInput[controlName]\r\n\r\n    return(<Input \r\n        key={controlName + index}\r\n        name={controlName}\r\n        type={control.type}\r\n        label={control.label}\r\n        value={control.value}\r\n        valid={control.valid}\r\n        touched={control.touched}\r\n        shouldValidate={!!control.validation}\r\n        errorMassage={control.errorMassage}\r\n        onChange={onChangeHandler}\r\n    />)\r\n    })\r\n  )}\r\n\r\n  const submitHandler = event => {\r\n    event.preventDefault()\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth\">\r\n      <h1>Validation Form</h1>\r\n      <form onSubmit={submitHandler}>\r\n        {renderInputs()}\r\n      </form>\r\n      <button disabled={!checkValidForm}>Submit</button>\r\n    </div>\r\n)}","import './App.css';\nimport { Auth } from './Auth/Auth';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Auth />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}